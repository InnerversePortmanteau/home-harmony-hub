rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Users Collection (User Profiles, MySpace Info, Skills) ---
    match /users/{userId} {
      allow read: if request.auth != null; // Allows reading any user profile for household list
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;

      match /skills/{skillId} {
        allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- Tasks Collection ---
    match /tasks/{taskId} {
      allow read: if request.auth != null &&
                      (resource.data.isPrivate == false || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null &&
                        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
                        resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null &&
                        resource.data.userId == request.auth.uid;
    }

    // --- Feature Requests Collection ---
    match /featureRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                        request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null &&
                        resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null &&
                        resource.data.userId == request.auth.uid;
    }

    // --- Sync Session Ideas Collection ---
    match /syncSessionIdeas/{ideaId} {
      allow read, create, delete: if request.auth != null;
    }

    // --- App Configuration Collection (for dynamic categories) ---
    match /appConfig/categories { // Directly match the 'categories' document ID
      allow read: if request.auth != null;
      allow write: if request.auth != null; // 'write' covers create, update, delete for this specific doc.
    }

    // --- Harmony Creatives Collection ---
    match /harmonyCreatives/{creativeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                        request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null &&
                        resource.data.userId == request.auth.uid;
    }

    // --- Training Requests Collection ---
    match /trainingRequests/{requestId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                        request.resource.data.requestedBy == request.auth.uid;
      allow delete: if request.auth != null &&
                        resource.resource.data.requestedBy == request.auth.uid; // Minor correction: resource.resource.data -> resource.data
    }

    // --- NEW: Clarity Messages Collection (Active Messages for Clarity) ---
    match /clarityMessages/{messageId} {
      // Allow any authenticated user to read active clarity messages (transparency).
      allow read: if request.auth != null;
      // Allow any authenticated user to create a clarity message, linking it to their UID.
      allow create: if request.auth != null &&
                        request.resource.data.userId == request.auth.uid;
      // Allow update: (e.g., if you add commenting later, or status changes not from resolve)
      // For now, only the creator can update.
      allow update: if request.auth != null &&
                        resource.data.userId == request.auth.uid;
      // Allow delete: Only the creator can delete an active message.
      allow delete: if request.auth != null &&
                        resource.data.userId == request.auth.uid;
    }

    // --- NEW: Resolved Agreements Collection (Archived Agreements) ---
    match /resolvedAgreements/{agreementId} {
      // Allow any authenticated user to read resolved agreements (transparency of decisions).
      allow read: if request.auth != null;
      // Allow creation when a message is resolved (can be done by anyone who resolves it).
      allow create: if request.auth != null;
      // No update/delete expected after an agreement is resolved and archived.
    }
  }
}
